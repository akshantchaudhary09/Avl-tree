// C program to insert a node in AVL tree
#include<stdio.h>
#include<stdlib.h>

struct Node
{
    int key;
    struct Node *left;
    struct Node *right;
    int height;
};
int max(int a, int b);//function to find maximum of two numbers
int height(struct Node *N);//function to find height of tree
struct Node* newNode(int key);//function to insert new node
struct Node *rightRotate(struct Node *y);//function to perform right rotation
struct Node *leftRotate(struct Node *x);//function to perform left rotation
int getBalance(struct Node *N);//function to calculate balancing factor
struct Node* insert(struct Node* node, int key);//function to insert node in AVL tree
void preOrder(struct Node *root);//traverse the tree in preorder
struct Node *insertBST(struct Node *root,int x);//function to insert node in binary search tree

int main()
{
  struct Node *root1 = NULL,*root2=NULL;

  /* Constructing BST tree */
  root2 = insertBST(root2, 1);
  root2 = insertBST(root2, 2);
  root2 = insertBST(root2, 3);
  root2 = insertBST(root2, 4);
  root2 = insertBST(root2, 5);
  root2 = insertBST(root2, 6);

  /* Constructing AVL tree */
  root1 = insert(root1, 1);
  root1 = insert(root1, 2);
  root1 = insert(root1, 3);
  root1 = insert(root1, 4);
  root1 = insert(root1, 5);
  root1 = insert(root1, 6);

  printf("Preorder traversal of the constructed unbalanced"
         " tree is \n");
  preOrder(root2);

  printf("\n\nPreorder traversal of the constructed AVL"
         " tree is \n");
  preOrder(root1);

  return 0;
}
int max(int a, int b)
{
    return (a > b)? a : b;
}
int height(struct Node *N)
{
    if (N == NULL)
        return 0;
    return N->height;
}
struct Node* newNode(int key)
{
    struct Node* node = (struct Node*)
                        malloc(sizeof(struct Node));
    node->key   = key;
    node->left   = NULL;
    node->right  = NULL;
    node->height = 1;  // new node is initially added at leaf
    return(node);
}
struct Node *rightRotate(struct Node *y)
{
    struct Node *x = y->left;
    struct Node *T2 = x->right;
    // Perform rotation
    x->right = y;
    y->left = T2;
    // Update heights
    y->height = max(height(y->left), height(y->right))+1;
    x->height = max(height(x->left), height(x->right))+1;
    // Return new root
    return x;
}
struct Node *leftRotate(struct Node *x)
{
    struct Node *y = x->right;
    struct Node *T2 = y->left;
    // Perform rotation
    y->left = x;
    x->right = T2;
    //  Update heights
    x->height = max(height(x->left), height(x->right))+1;
    y->height = max(height(y->left), height(y->right))+1;
    // Return new root
    return y;
}
int getBalance(struct Node *N)
{
    if (N == NULL)
        return 0;
    return height(N->left) - height(N->right);
}
struct Node* insert(struct Node* node, int key)
{
    if (node == NULL)
        return(newNode(key));

    if (key < node->key)
        node->left  = insert(node->left, key);
    else if (key > node->key)
        node->right = insert(node->right, key);
    else
        return node;
    node->height = 1 + max(height(node->left),
                           height(node->right));

    int balance = getBalance(node);
    if (balance > 1 && key < node->left->key)
        return rightRotate(node);
    if (balance < -1 && key > node->right->key)
        return leftRotate(node);

    if (balance > 1 && key > node->left->key)
    {
        node->left =  leftRotate(node->left);
        return rightRotate(node);
    }

    if (balance < -1 && key < node->right->key)
    {
        node->right = rightRotate(node->right);
        return leftRotate(node);
    }
   return node;
}
void preOrder(struct Node *root)
{
    if(root != NULL)
    {
        printf("%d ", root->key);
        preOrder(root->left);
        preOrder(root->right);
    }
}
struct Node *insertBST(struct Node *root,int x)
{
    struct Node *temp,*p,*par;
    p=root;
    par=NULL;
    while(p!=NULL)
    {
        par=p;
        if(x>p->key)
            p=p->right;
        else if(x<p->key)
            p=p->left;
        else
        {
            printf("Key already present in the tree");
            return root;
        }
    }
    temp=newNode(x);
    if(par==NULL)
        root=temp;
    else if(x>par->key)
        par->right=temp;
    else
        par->left=temp;
    return root;
}

